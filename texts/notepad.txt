중복을 제거하고, 유지 보수를 용이하게 하는 것. 앞선 행위들로 인해, 오류가 발생할 가능성을 낮춰준다.

메타 데이터란 브라우저에는 영향을 미치지만, 사용자에게는 보이지 않는 정보를 말한다. 즉 브라우저 스크린에는 표시 되지 않는 정보를 말한다.
예를 들면, style element의 정보들은 브라우저에서 표시되지 않아, 사용자에게 보이지 않지만, 백그라운드 컬러 라든지 텍스트 정렬과 같은 영향을 브라우저에게 끼치고 있다.
이러한 메타 데이터는 보통 head element 안에 존재하고, 브라우저에 표시되는 정보들은 body element 안에 존재하게 된다. 


# VS Code Shortcut(Do you want to More information about vscode shorcut? Visit website below)
https://academind.com/tutorials/visual-studio-code-introduction/

# 정렬과 관련하여.
CSS에서, text-align: center;와 같은 특성과 값은, html 요소 안에 존재하는 컨텐츠에 대해 작용하는 것이므로, 즉 <p>test</p>에서 p element 안에 "test"라는 컨텐츠에 대해 작용한다. 따라서, 빈 요소, 즉 void element의 경우, element 내에 컨텐츠가 존재하지 않으므로, 부모 element를 이용하여, 부모 element 내에 존재하는 컨텐츠로 작동하도록 하여, 빈 요소를 중앙으로 정렬시키는 특성을 적용할 수 있다. 빈요소의 예는, <img src="" alt"">가 존재한다.
# 이미지 alt="" 속성과 관련하여.
alt="" 속성에는 이미지가 브라우저에 로드되지 않았을때, 표시하는 텍스트로, 이미지에 대한 설명을 추가하면 된다.

# 상속, 계단식, 우선순위
CSS의 경우, 부모의 특성을 자식이 상속 받고, 하지만, 자식에 직접적으로 스타일이 적용되어 있다면, 좀 더 구체적인 요소가 더 높은 우선순위를 가지므로, 자식에 직접적으로 정의된 스타일이 적용된다. 또한, 하나의 요소에 여러 특성을 적용할 경우, 가장 최신 규칙이 적용된다. 위에서 아래로 적용됨으로.

# inline & block level
인라인 레벨의 요소는 다른 요소에 영향을 미치고, 마진 top, bottom과 padding에 제한이 존재한다. 또한, header에 인라인 레벨의 요소가 존재하면, 전체가 영역으로 지정되지 않는다. 이러한 한계는, display: inline-block을 사용함으로써, 극복이 가능하다.

inline level의 경우, text-aline: center 가 작동하지만, block level의 경우, 위 특성이 작동하지 않는다. 따라서, block level의 경우, margin의 left & right을 auto로 지정함으로써, 컨텐츠를 중앙으로 정렬시킬 수 있다.

# github repository remote update

1. Checking: git status
2. add: git add . (all files in pwd)
3. commit: git commit -m "type message"
4. push: git push origin +master

# git & github
시간 경과에 따른, 코드 변화들에 대한 추적 및 제어를 효율적으로 하는 것.

commit = code snapshot

add = track the modified things of the (selected) files.

staging area: located between working dir. and commit what i want to create.

git remote add origin [repository url]
git push -u origin +main(push files forced)

# innitializing personal access token from github(windows)
	git credential reject
	host=github.com
	protocol=https

# More informations about CSS
위치 속성에 대한 추가 정보
=>https://academind.com/tutorials/the-position-property/

플렉스박스 - 플렉스 컨테이너 => https://academind.com/tutorials/flexbox-basics-container/

플렉스박스 - 플렉스 아이템 => https://academind.com/tutorials/flexbox-flex-items/

플렉스박스와 그리드 비교 => https://academind.com/tutorials/css-grid-vs-flexbox/

#mobile first
@media(min-width: value) {}

#Desktop first
@media(max-width: value) {}

#Units

px: fixed value(not responsive)

%, em : having cascading nature by parents
But, % was inherited from parents's width & 
em was inherited from parents's font-size

rem : inherited from root elemnt(i.e. inherited from choice of User's font-size setting)
